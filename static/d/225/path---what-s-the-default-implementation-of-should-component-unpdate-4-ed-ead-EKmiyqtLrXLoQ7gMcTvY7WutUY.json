{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"f9a338c7-e8e9-592e-a551-42f1579ddb6b","excerpt":"tl;dr According to  React documentation It just returns  You can also see it in the  source code  (react 16.2.0) When it’s   it does shallow…","html":"<p>tl;dr</p>\n<p>According to <a href=\"https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e\">React documentation</a></p>\n<p>It just returns <code class=\"language-text\">true</code></p>\n<p>You can also see it in the <a href=\"https://github.com/facebook/react/blob/1637b43e27c40c73f9489603145f9bb1d0ece618/packages/react-reconciler/src/ReactFiberClassComponent.js#L200\">source code</a> (react 16.2.0)</p>\n<p>When it’s <code class=\"language-text\">PureComponent</code> it does shallow equals\n{% codeblock lang:javascript %}\nif (type.prototype &#x26;&#x26; type.prototype.isPureReactComponent) {\nreturn (\n!shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n);\n}\n{% endcodeblock %}</p>\n<!-- more -->\n<p>Example:</p>\n<p><a href=\"https://codepen.io/kossel/pen/ZvYXQG?editors=1111\">codepen.io</a></p>\n<p>Consider following code:</p>\n<p>{% codeblock lang:javascript %}\nclass Hello extends React.Component {\nrender(){\nconst {name, handleOnClick} = this.props\nconsole.log(‘rendered Hello’)\nreturn (<div>\nhello {name}\n<button onClick={handleOnClick}> Test </button>\n</div>)\n}\n}</p>\n<p>class App extends React.Component {\nconstructor(props){\nsuper(props);\nconst afunction = function(){\nconsole.log(‘clicked’);\n}\nthis.a = afunction;  // yes they are referring to same function\nthis.b = afunction;  // yes they are referring to same function\nthis.state = {\nselected: this.a\n}\nthis.changeSelected = this.changeSelected.bind(this);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">      changeSelected() {\n        this.setState({\n          selected: this.b\n        })\n      }\n\n      render() {\n        console.log(&#39;rendered app&#39;)\n        return(\n          &lt;div&gt;\n            &lt;Hello name=&quot;World&quot; handleOnClick={this.state.selected} /&gt;\n            &lt;button onClick={this.changeSelected}&gt;Swap function&lt;/button&gt;\n          &lt;/div&gt;\n        );\n\n      }\n    }</code></pre>\n      </div>\n<p>{% endcodeblock %}</p>\n<p>The output log\n<code class=\"language-text\">rendered app</code>\n<code class=\"language-text\">rendered Hello</code>\nEverytime you press “Swap function” button, the render function is called even the props hasn’t changed.</p>\n<p>However if you change the Hello component to extends to <code class=\"language-text\">React.PureComponent</code>\nPression “Swap function” will not call Hello component’s render function.</p>\n<p>But, don’t think it’s an easy optimization!! you have to be specially careful rolling your own <code class=\"language-text\">shouldComponentUpdate</code>!! read this awesome post first please <a href=\"http://jamesknelson.com/should-i-use-shouldcomponentupdate/\">Shoul I use ShouldComponentUpdate?</a></p>","frontmatter":{"title":"What's the default implementation of shouldComponentUnpdate","date":"December 13, 2017"}}},"pageContext":{"slug":"/What-s-the-default-implementation-of-shouldComponentUnpdate/","previous":{"fields":{"slug":"/Why-call-super-or-super-props/"},"frontmatter":{"title":"Why call super or super(props)"}},"next":null}}