{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"0dac6d6b-1395-5ec0-931c-640a4458255e","excerpt":"In react world, many time we call   and  , I do that and saw in many places, however I’ve never asked myself what does it actually do… eg…","html":"<p>In react world, many time we call <code class=\"language-text\">super</code> and <code class=\"language-text\">super(props)</code>, I do that and saw in many places, however I’ve never asked myself what does it actually do…</p>\n<p>eg.\n{% codeblock lang:javascript %}\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper(props);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">this.onClickDiv = this.onClickDiv.bind(this);</code></pre>\n      </div>\n<p>  }</p>\n<p>  onClickDiv() {\n// do stuff\n}</p>\n<p>  render() {\nreturn <div onClick={this.onClickDiv} />;\n}\n}\n{% endcodeblock %}</p>\n<!-- more -->\n<p>So according to React <a href=\"https://github.com/facebook/react/blob/52752446760dee0bc7232b4146f5a309ac57f065/src/isomorphic/modern/class/ReactComponent.js#L23\">source code</a>\n{% codeblock lang:javascript %}\nfunction ReactComponent(props, context) {\nthis.props = props;\nthis.context = context;\n}\n{% endcodeblock %}</p>\n<p>The only reason is to let you use <code class=\"language-text\">this</code> or <code class=\"language-text\">this.props</code> inside of the constructor, however you could always use <code class=\"language-text\">props</code> from the constructor attribute…\nThere is only one reason when one needs to pass props to super():</p>\n<p> Passing:\n{% codeblock lang:javascript %}\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper(props)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">     console.log(this.props)\n     // goood\n }</code></pre>\n      </div>\n<p> }\n{% endcodeblock %}</p>\n<p> Not passing:</p>\n<p> {% codeblock lang:javascript %}\nclass MyComponent extends React.Component {\nconstructor(props) {\nsuper()</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">     console.log(this.props)\n     // -&gt; undefined\n\n     // Props parameter is still available\n     console.log(props)\n     // good\n }\n\n render() {\n     // No difference outside constructor\n     console.log(this.props)\n     // good\n }</code></pre>\n      </div>\n<p> }</p>\n<p>{% endcodeblock %}</p>\n<p> Not calling:</p>\n<p> {% codeblock lang:javascript %}\nclass MyComponent extends React.Component {\nconstructor(props) {\nconsole.log(this)\n// undefined\n}\n}\n{% endcodeblock %}</p>\n<p> Source: <a href=\"https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e\">Stackoverflow</a></p>","frontmatter":{"title":"Why call super or super(props)","date":"December 13, 2017"}}},"pageContext":{"slug":"/Why-call-super-or-super-props/","previous":{"fields":{"slug":"/React-16-fragment-vs-container-divs/"},"frontmatter":{"title":"React 16 fragment vs container divs"}},"next":{"fields":{"slug":"/Default-implementation-of-shouldComponentUnpdate/"},"frontmatter":{"title":"What's the default implementation of shouldComponentUnpdate"}}}}